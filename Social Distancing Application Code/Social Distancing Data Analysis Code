################################################################################
####           Bias Mitigation in Matched Observational Studies             ####
####                    with Continuous Treatments                          ####
####                        Application Code                                ####
####                Anthony Frazier, Siyu Heng, Wen Zhou                    ####
################################################################################

################################################################################
####                         Primary Analysis                               ####
################################################################################

#### libraries, data files, functions --------------------------------------------------
library(ggplot2)                                    # plot creation
library(tidyverse)                                  # dataframe manipulation
library(randomForest)                               # used in linCDE, if using RF for centering
library(nbpMatching)                                # non-bipartite matching algorithm
library(kableExtra)                                 # table creation
library(tidyr)                                      # dataframe manipulation
library(dplyr)                                      # dataframe manipulation
library(RFCDE)                                      # for CDE
library(earth)                                      # for model-based method
library(kde1d)                                      # for model-based method
devtools::install_github("ZijunGao/LinCDE", build_vignettes = TRUE) # linCDE
set.seed(12345)

# data files
lowdose_data <- read.csv("matched_data_lowdose.csv")
highdose_data <- read.csv("matched_data_highdose.csv")
lowdose_0.1caliper_data <- read.csv("matched_data_0.1caliper_lowdose.csv")
highdose_0.1caliper_data <- read.csv("matched_data_0.1caliper_highdose.csv")
caliper_p_dist <- read.csv("full_p_distribution_0.1caliper.csv")[, -1]

# reformatting / cleaning data
names(lowdose_data)[1] <- "ID"
names(highdose_data)[1] <- "ID"
all_postmatch_data <- rbind(lowdose_data, highdose_data)
names(lowdose_0.1caliper_data)[1] <- "ID"
names(highdose_0.1caliper_data)[1] <- "ID"
all_postmatch_0.1caliper_data <- rbind(lowdose_0.1caliper_data, highdose_0.1caliper_data)

# functions
round_df <- function(x, digits) {
  # x: data frame 
  # digits: number of digits to round
  numeric_columns <- sapply(x, mode) == 'numeric'
  x[numeric_columns] <-  round(x[numeric_columns], digits)
  x
}
quantile_analysis <- function(high_df, low_df, quants, pvec, xi){
  
  dose_diffs <- high_df$cumulative_dose - low_df$cumulative_dose
  output <- data.frame(matrix(nrow = 0, ncol = 5))
  for(i in 1:length(quants)){
    subindex <- which(dose_diffs > quants[i])
    high_df_sub <- high_df[subindex, ]
    low_df_sub <- low_df[subindex, ]
    p_sub <- pvec[subindex]
    quant <- as.numeric(quants[i])
    
    numerator <- 1:nrow(high_df_sub)
    denominator <- 1:nrow(low_df_sub)
    for(i in 1:nrow(high_df_sub)){
      numerator[i] <- (high_df_sub[i, "cases"] - low_df_sub[i, "cases"])
      denominator[i] <- (high_df_sub[i, "cumulative_dose"] - low_df_sub[i, "cumulative_dose"])
    }
    ATE_classic_cases <- sum(numerator)/sum(denominator)
    
    # conservative confidence interval for classic estimator
    
    a <- ATE_classic_cases * (sum(high_df_sub[, "cumulative_dose"] - low_df_sub[, "cumulative_dose"])) / nrow(high_df_sub)
    numerator <- sum(((high_df_sub[, "cases"] - low_df_sub[, "cases"]) - a)^2)
    denominator <- sum(high_df_sub[, "cumulative_dose"] - low_df_sub[, "cumulative_dose"])^2
    variance_ATE_classic_cases <- (numerator/denominator) * (nrow(high_df_sub)/(nrow(high_df_sub) - 1))
    CI_ATE_classic_cases <- c(ATE_classic_cases - (qnorm(0.975) * sqrt(variance_ATE_classic_cases)), ATE_classic_cases + (qnorm(0.975) * sqrt(variance_ATE_classic_cases)))
    
    output <- rbind(output, c(quant, "Classic", ATE_classic_cases, CI_ATE_classic_cases))
    
    # Bias-corrected estimation, not regulated
    numerator <- 1:nrow(high_df_sub)
    denominator <- 1:nrow(high_df_sub)
    for(i in 1:nrow(high_df_sub)){
      numerator[i] <- p_sub[i]^(-1) * (high_df_sub[i, "cases"] - low_df_sub[i, "cases"])
      denominator[i] <- 2*(high_df_sub[i, "cumulative_dose"] - low_df_sub[i, "cumulative_dose"])
    }
    ATE_bias_corrected_cases <- sum(numerator)/sum(denominator)
    
    # Conservative confidence interval for bias-corrected estimator, not regulated
    
    a <- ATE_bias_corrected_cases * ((2*(high_df_sub[i, "cumulative_dose"] - low_df_sub[i, "cumulative_dose"]))/(nrow(high_df_sub)))
    
    numerator <- 1:nrow(high_df_sub)
    for(i in 1:nrow(high_df_sub)){
      numerator[i] <- ((p_sub[i])^(-1)*(high_df_sub[i, "cases"] - low_df_sub[i, "cases"]) - a)^2
    }
    denominator <- 4 * (sum(high_df_sub[, "cumulative_dose"] - low_df_sub[, "cumulative_dose"])^2)
    variance_ATE_bias_corrected_cases <- (sum(numerator)/sum(denominator)) * (nrow(high_df_sub)/(nrow(high_df_sub) - 1))
    CI_ATE_bias_corrected_cases <- c(ATE_bias_corrected_cases - (qnorm(0.975) * sqrt(variance_ATE_bias_corrected_cases)), ATE_bias_corrected_cases + (qnorm(0.975) * sqrt(variance_ATE_bias_corrected_cases)))
    
    output <- rbind(output, c(quant, "bias_Corrected", ATE_bias_corrected_cases, CI_ATE_bias_corrected_cases))
    
    # Bias-corrected estimation, regulated
    
    numerator <- 1:nrow(high_df_sub)
    denominator <- 1:nrow(high_df_sub)
    for(i in 1:nrow(high_df_sub)){
      
      p <- p_sub[i]
      if(p < xi){
        p <- xi
      }
      if(p > 1-xi){
        p <- 1-xi
      }
      
      numerator[i] <- p^(-1) * (high_df_sub[i, "cases"] - low_df_sub[i, "cases"])
      denominator[i] <- 2*(high_df_sub[i, "cumulative_dose"] - low_df_sub[i, "cumulative_dose"])
    }
    ATE_bcReg_cases <- sum(numerator)/sum(denominator)
    
    # Conservative confidence interval for bias-corrected estimator, regulated (xi = 0.1)
    
    a <- ATE_bcReg_cases * ((2*(high_df_sub[i, "cumulative_dose"] - low_df_sub[i, "cumulative_dose"]))/(nrow(high_df_sub)))
    low_num <- rep(0, nrow(high_df_sub)); mid_num <- rep(0, nrow(high_df_sub)); high_num <- rep(0, nrow(high_df_sub))
    
    for(i in 1:nrow(high_df_sub)){
      
      p = p_sub[i]
      
      if(p < xi){
        low_num[i] <- ((xi)^(-1)*(high_df_sub[i, "cases"] - low_df_sub[i, "cases"]) - a)^2
      }
      
      if(p <= (1-xi) & p >= xi){
        mid_num[i] <- ((p)^(-1)*(high_df_sub[i, "cases"] - low_df_sub[i, "cases"]) - a)^2
      }
      
      if(p > (1-xi)){
        high_num[i] <-((1 - xi)^(-1)*(high_df_sub[i, "cases"] - low_df_sub[i, "cases"]) - a)^2
      }
      
    }
    
    denominator <- 4*sum(high_df_sub[, "cumulative_dose"] - low_df_sub[, "cumulative_dose"])^2
    variance_ATE_bcReg_cases <- ((sum(low_num) + sum(mid_num) + sum(high_num)) / denominator) * (nrow(high_df_sub)/(nrow(high_df_sub) - 1))
    CI_ATE_bcReg_cases <- c(ATE_bcReg_cases - (qnorm(0.975) * sqrt(variance_ATE_bcReg_cases)), ATE_bcReg_cases + (qnorm(0.975) * sqrt(variance_ATE_bcReg_cases)))
    
    output <- rbind(output, c(quant, "bcReg", ATE_bcReg_cases, CI_ATE_bcReg_cases))
    
  }
  
  names(output) <- c("Quantile", "Method", "Estimate", "Lower_CI", "Upper_CI")
  
  output[, c(1, 3:5)] <- lapply(output[, c(1, 3:5)], as.numeric)
  return(output)
  
}

#### creating p-matrix (linCDE) ------------------------------------------------

covariates <- c(6:8, 10:15, 20:46, 54:55)

# estimating conditional mean of treatment given covariates, fitting linCDE on residuals
model <- LinCDE::LinCDE.boost(y = all_postmatch_data[, 50], X = all_postmatch_data[, covariates], terminalSize = 20, verbose = FALSE, centering = TRUE, centeringMethod = "linearRegression")

# will hold conditional density estimates for every combination of treatment
# and covariates
propensity_matrix <- matrix(0, nrow = nrow(all_postmatch_data), ncol = nrow(all_postmatch_data))

for(i in 1:nrow(propensity_matrix)){
  propensity_matrix[i, ] <- LinCDE::predict.LinCDE(model, X = all_postmatch_data[i, covariates], y = all_postmatch_data[, 50])
}

# will hold output (matrix of probabilities of observed treatment assignment)
p_matrix <- matrix(0, nrow = nrow(all_postmatch_data), ncol = nrow(all_postmatch_data))

for(i in 1:(nrow(all_postmatch_data)-1)){
  for(j in (i+1):nrow(all_postmatch_data)){
    observed_treatment <- propensity_matrix[i, i] * propensity_matrix[j, j]
    opposing_treatment <- propensity_matrix[j, i] * propensity_matrix[i, j]
    p_matrix[i, j] <- observed_treatment / (observed_treatment + opposing_treatment)
    p_matrix[j, i] <- p_matrix[i, j]
  }
}

p_matched <- 1:nrow(highdose_data)
for(i in 1:nrow(highdose_data)){
  p_matched[i] <- p_matrix[i, i+1211]
}

#### Plots and summary statistics of probability of observed treatment assignment ----

# histogram showing distribution of probability of observed treatment assignment for all possible pairs
ggplot() + 
  geom_histogram(aes(x = p_matrix[upper.tri(p_matrix)]), binwidth = 0.05, fill = "white", color = "black") + 
  theme_bw() + 
  labs(x = "Probability of Observed Treatment Assignment", y = "Frequency") + 
  theme(axis.text = element_text(size = 12))
ggsave("P_distribution_all.png", width = 4.5, height = 3)

# histogram showing distribution of probability of observed treatment assignment of matched pairs
ggplot() + 
  geom_histogram(aes(x = p_matched), binwidth = 0.05, fill = "white", color = "black") + 
  theme_bw() + 
  labs(x = "Probability of Observed Treatment Assignment", y = "Frequency") + 
  theme(axis.text = element_text(size = 12))
ggsave("P_distribution_matched.png", width = 4.5, height = 3)

# 5-number summary of probability of observed treatment assignment for matched pairs
quantile(p_matched, c(0, 0.25, 0.5, 0.75, 1.0))

#### Average treatment effect estimation for original set of matched pairs, Cases -----

main_analysis_data <- quantile_analysis(highdose_data, lowdose_data, c(0), p_matched, 0.1)
main_analysis_data <- main_analysis_data[, -1]
write.csv(main_analysis_data, "main_analysis_summary.csv")

#### 0.1 caliper analysis ----

# histogram showing distribution of probability of observed treatment assignment of matched pairs
ggplot() + 
  geom_histogram(aes(x = caliper_p_dist), binwidth = 0.05, fill = "white", color = "black") + 
  theme_bw() + 
  labs(x = "Probability of Observed Treatment Assignment", y = "Frequency") + 
  theme(axis.text = element_text(size = 12))
ggsave("P_distribution_0.1caliper.png", width = 4.5, height = 3)

# 5-number summary of probability of observed treatment assignment for matched pairs
quantile(caliper_p_dist, c(0, 0.25, 0.5, 0.75, 1.0))

caliper_analysis <- quantile_analysis(highdose_0.1caliper_data, lowdose_0.1caliper_data, c(0), caliper_p_dist, 0.1)
caliper_analysis <- caliper_analysis[, -1]
caliper_analysis <- caliper_analysis[-3, ]
write.csv(caliper_analysis, "main_caliper_analysis.csv")


#### Balance table for original set of 1,211 matched pairs ---------------------

bt <- read.csv("balance_table.csv")
balance_df <- cbind(bt$Variable, abs(bt$standardized_difference))
balance_df <- data.frame(balance_df)
names(balance_df) <- c("Variable", "Standardized_difference")
balance_df[, 2] <- as.numeric(balance_df[, 2])
balance_df <- balance_df[order(balance_df$Standardized_difference, decreasing = TRUE), ]
balance_df <- balance_df[-1, ]
#top10_balance <- balance_df[1:10, ]

ggplot(data = balance_df) + 
  geom_point(aes(x = reorder(Variable, -Standardized_difference, decreasing = TRUE), y = Standardized_difference)) + 
  coord_flip() + 
  theme_bw() + 
  labs(x = "Covariates", 
       y = "Standardized Difference-in-means") +
  theme(axis.text = element_text(size = 8),
        axis.title = element_text(size = 9))



################################################################################
####                        Secondary Analysis                              ####
################################################################################

#### Distribution of highdose - lowdoses ----

# calculate dose differences within each pair
dose_diffs <- highdose_data$cumulative_dose - lowdose_data$cumulative_dose

# histogram showing distribution of dose differences
ggplot() + 
  geom_histogram(aes(x = dose_diffs), binwidth = 0.01, fill = "white", color = "black") + 
  theme_bw() + 
  labs(x = "Dose Differences (High - Low)", y = "Frequency") + 
  theme(axis.text = element_text(size = 12))
ggsave("Dose_Differences_Distribution.png", width = 4.5, height = 3)

#### Subgroup analysis (by quantile of dose differences) ----

# vector of quantiles of dose differences
quantiles <- quantile(dose_diffs, seq(0.1, 0.9, by = 0.1))

# estimate ATE and inference for all observations above a certain quantile, for all quantiles. 
quant_data <- quantile_analysis(highdose_data, lowdose_data, quantiles, p_matched, 0.1)
write.csv(quant_data, "quantile_analysis.csv")

table_data <- round_df(quant_data, 3)
kbl(table_data, align = 'c', booktabs = T, format = "latex", row.names = FALSE,
    caption = "Simulation Results (Bias, MSE, ML, CR)", position = "H") %>%
  kable_classic(full_width = F, html_font = "Cambria") %>%
  collapse_rows(columns = c(1), latex_hline = "custom",  valign = "middle")

# visualization of quantile analysis results
ggplot(data = full_quant_data) +
  geom_point(aes(x = Quantile, y = Estimate, color = Method), position=position_dodge(width =0.005)) + 
  geom_errorbar(aes(x = Quantile, y = Estimate, ymin = Lower_CI, ymax = Upper_CI, color = Method),
                position=position_dodge(width =0.005)) +
  geom_hline(yintercept = 0, linetype = "dashed") +
  theme_bw() + 
  labs(x = "Minimum Dose Difference", y = "ATE Estimate and Confidence Interval",
       color = "Estimation Method") + 
  theme(axis.text = element_text(size = 12),
        legend.position = c(0.33, 0.07),
        legend.direction = "horizontal")
#ggsave("Quantile_Analysis.png", width = 4.5, height = 3)

#### Urban vs Rural Subgroup Analysis ----

# create matched pair subsets for rural and urban counties
rural <- all_postmatch_data[which(all_postmatch_data$non_metro == 1), ]
urban <- all_postmatch_data[which(all_postmatch_data$non_metro == 0), ]

# subset probability of observed treatment assignment by rural or urban
p_rural <- p_matched[as.numeric(row.names(rural[1:(nrow(rural)/2), ]))]
p_urban <- p_matched[as.numeric(row.names(urban[1:(nrow(urban)/2), ]))]

# calculate ATE and inference for rural and urban matched pairs
rural_analysis <- quantile_analysis(rural[(nrow(rural)/2 + 1):(nrow(rural)), ], rural[1:(nrow(rural)/2), ], c(0), p_rural, 0.1)
urban_analysis <- quantile_analysis(urban[(nrow(urban)/2 + 1):(nrow(urban)), ], urban[1:(nrow(urban)/2), ], c(0), p_urban, 0.1)
rural_urban <- rbind(rural_analysis, urban_analysis)
NonMetro <- c(rep(1, 3), rep(0, 3))
rural_urban[, 1] <- NonMetro
names(rural_urban) <- c("Rural", "Method", "Estimate", "Lower_CI", "Upper_CI")

# histogram showing distribution of probability of observed treatment assignment for rural areas
ggplot() + 
  geom_histogram(aes(x = p_rural), binwidth = 0.05, fill = "white", color = "black") + 
  theme_bw() + 
  labs(x = "Probability of Observed Treatment Assignment", y = "Frequency") + 
  theme(axis.text = element_text(size = 12))
ggsave("P_distribution_rural.png", width = 4.5, height = 3)

# histogram showing distribution of probability of observed treatment assignment for urban areas
ggplot() + 
  geom_histogram(aes(x = p_urban), binwidth = 0.05, fill = "white", color = "black") + 
  theme_bw() + 
  labs(x = "Probability of Observed Treatment Assignment", y = "Frequency") + 
  theme(axis.text = element_text(size = 12))
ggsave("P_distribution_urban.png", width = 4.5, height = 3)

write.csv(rural_urban, "rural_urban_analysis.csv")



################################################################################
####                       Sensitivity Analysis                             ####
################################################################################

#### Bias-corrected estimation and inference using RFCDE ---------------------------------------------

# calculate ATE and inference for COVID-19 cases using RFCDE to estimate the
# generalized propensity score
covariates <- c(6:8, 10:15, 20:46, 54:55)
model <- RFCDE(all_postmatch_data[, covariates], all_postmatch_data[, 50])

# creates matrix of predicted CDE values of Z given covariates (X)
predicted <- predict(model, as.matrix(all_postmatch_data[, covariates]), "CDE", all_postmatch_data[, 50])

# holds f(Z_n|X_n) for all observations. 
same_propensity_vector <- 1:nrow(all_postmatch_data)

for(i in 1:nrow(all_postmatch_data)){
  
  same_propensity_vector[i] <- predicted[i, i] # "given" is first arg, predicting the second arg
  
}

# holds joint density values related to observed treatment assignment
observed_treatment_matrix <- same_propensity_vector %*% base::t(same_propensity_vector)

# will hold output (matrix of probabilities of observed treatment assignment)
p_matrix <- matrix(0, nrow = nrow(all_postmatch_data), ncol = nrow(all_postmatch_data))

for(i in 1:(nrow(all_postmatch_data)-1)){
  for(j in (i+1):nrow(all_postmatch_data)){
    
    # calculate probability of opposing treatment assignment for each pair
    opposing_treatment <- predicted[j, i] * predicted[i, j]
    
    # calculates probability of observed treatment assignment
    p_matrix[i, j] <- observed_treatment_matrix[i, j] / (observed_treatment_matrix[i, j] + opposing_treatment)
    
    # ensures p_matrix is symmetric
    p_matrix[j, i] <- p_matrix[i, j]
    
  }
}

p_matched <- 1:nrow(highdose_data)
for(i in 1:nrow(highdose_data)){
  p_matched[i] <- p_matrix[i, i+1211]
}

ggplot() + 
  geom_histogram(aes(x = p_matrix[upper.tri(p_matrix)]), binwidth = 0.05, fill = "white", color = "black") + 
  theme_bw() + 
  labs(x = "Probability of Observed Treatment Assignment (RFCDE)", y = "Frequency") + 
  theme(axis.text = element_text(size = 12))
ggsave("P_distribution_all_RFCDE.png", width = 4.5, height = 3)

# histogram showing distribution of probability of observed treatment assignment of matched pairs
ggplot() + 
  geom_histogram(aes(x = p_matched), binwidth = 0.05, fill = "white", color = "black") + 
  theme_bw() + 
  labs(x = "Probability of Observed Treatment Assignment (RFCDE)", y = "Frequency") + 
  theme(axis.text = element_text(size = 12))
ggsave("P_distribution_matched_RFCDE.png", width = 4.5, height = 3)

# 5-number summary of probability of observed treatment assignment for matched pairs
quantile(p_matched, c(0, 0.25, 0.5, 0.75, 1.0))

main_analysis_data <- quantile_analysis(highdose_data, lowdose_data, c(0), p_matched, 0.1)
main_analysis_data <- main_analysis_data[, -1]
write.csv(main_analysis_data, "RFCDE_analysis_summary.csv")

#### Bias-corrected estimation and inference using model-based method ----

# fit E[z|x] model
covariates <- c(6:8, 10:15, 20:46, 54:55)
model <- earth(all_postmatch_data[, 50] ~., data = all_postmatch_data[, covariates], degree = 2)

# calculate density of observed treatment assignment
residuals <- model$residuals
res_density <- kde1d(residuals)
observed_treatment_density <- dkde1d(residuals, res_density)
observed_treatment_assignment <- observed_treatment_density %*% base::t(observed_treatment_density)

# calculate density of opposing treatment assignment
opposing_residual <- c(lowdose_data[, 50] - model$fitted.values[1212:2422], highdose_data[, 50] - model$fitted.values[1:1211])
opposing_res_density <- kde1d(opposing_residual)
opposing_treatment_density <- dkde1d(opposing_residual, opposing_res_density)
opposing_treatment_assignment <- opposing_treatment_density %*% base::t(opposing_treatment_density)

# creating matrix of probability of observed treatment assignments
p_matrix <- matrix(0, nrow = nrow(all_postmatch_data), ncol = nrow(all_postmatch_data))

for(i in 1:(nrow(all_postmatch_data)-1)){
  for(j in (i+1):nrow(all_postmatch_data)){
    
    # calculates probability of observed treatment assignment
    p_matrix[i, j] <- observed_treatment_assignment[i, j] / (observed_treatment_assignment[i, j] + opposing_treatment_assignment[i, j])
    
    # ensures p_matrix is symmetric
    p_matrix[j, i] <- p_matrix[i, j]
    
  }
}

p_matched <- 1:nrow(highdose_data)
for(i in 1:nrow(highdose_data)){
  p_matched[i] <- p_matrix[i, i+1211]
}

model_based_analysis <- quantile_analysis(highdose_data, lowdose_data, c(0), p_matched, 0.1)


#### Testing different hyperparameter values for linCDE ------------------------

# function for estimating probability of observed treatment assignment given different
# basis and prior arguments for linCDE
create_p_matched <- function(df, covariate_idx, outcome_idx, basis_arg, prior_arg){
  
  # estimating conditional mean of treatment given covariates, fitting linCDE on residuals
  model <- LinCDE::LinCDE.boost(y = df[, outcome_idx], X = df[, covariate_idx], terminalSize = 20, basis = basis_arg, prior = prior_arg, verbose = FALSE, centering = TRUE, centeringMethod = "linearRegression")
  
  # will hold conditional density estimates for every combination of treatment
  # and covariates
  propensity_matrix <- matrix(0, nrow = nrow(df), ncol = nrow(df))
  
  for(i in 1:nrow(propensity_matrix)){
    propensity_matrix[i, ] <- LinCDE::predict.LinCDE(model, X = df[i, covariate_idx], y = df[, outcome_idx])
  }
  
  # will hold output (matrix of probabilities of observed treatment assignment)
  p_matrix <- matrix(0, nrow = nrow(df), ncol = nrow(df))
  
  for(i in 1:(nrow(df)-1)){
    for(j in (i+1):nrow(df)){
      observed_treatment <- propensity_matrix[i, i] * propensity_matrix[j, j]
      opposing_treatment <- propensity_matrix[j, i] * propensity_matrix[i, j]
      p_matrix[i, j] <- observed_treatment / (observed_treatment + opposing_treatment)
      p_matrix[j, i] <- p_matrix[i, j]
    }
  }
  
  p_matched <- 1:(nrow(df)/2)
  for(i in 1:length(p_matched)){
    p_matched[i] <- p_matrix[i, i + length(p_matched)]
  }
  
  return(p_matched)
}

# calculate ATE and inference using different linCDE specifications
covariates <- c(6:8, 10:15, 20:46, 54:55)
basis_arguments <- c("Gaussian", "nsTransform")
prior_arguments <- c("uniform", "Gaussian", "LindseyMarginal")
output <- data.frame(matrix(nrow = 0, ncol = 8))
set.seed(12345)

  for(j in 1:length(basis_arguments)){
    for(k in 1:length(prior_arguments)){
      
      p_matched <- create_p_matched(all_postmatch_data, covariates, 50, basis_arguments[j], prior_arguments[k])
      estimates <- quantile_analysis(highdose_data, lowdose_data, c(0), p_matched, 0.1)
      estimates <- do.call("cbind", list(estimates, basis_arguments[j], prior_arguments[k]))
      names(estimates) <- c("Quantile", "Method", "Estimate", "Lower_CI", "Upper_CI", "Basis", "Prior")
      output <- rbind(output, estimates)
    }
  }

output <- output[-which(output$Method == "Classic"), ]
output <- output[, -1]
output <- do.call("cbind", list(output[, 5:6], output[, 1:4]))

write.csv(output, "sensitivity_analysis.csv", row.names = FALSE)

#### Caliper analyses with xi = 0.2, 0.3, 0.4 ----------------------------------

# data files
lowdose_0.2caliper_data <- read.csv("matched_data_0.2caliper_lowdose.csv")
highdose_0.2caliper_data <- read.csv("matched_data_0.2caliper_highdose.csv")
caliper_p_dist_0.2 <- read.csv("full_p_distribution_0.2caliper.csv")[, -1]

lowdose_0.3caliper_data <- read.csv("matched_data_0.3caliper_lowdose.csv")
highdose_0.3caliper_data <- read.csv("matched_data_0.3caliper_highdose.csv")
caliper_p_dist_0.3 <- read.csv("full_p_distribution_0.3caliper.csv")[, -1]

lowdose_0.4caliper_data <- read.csv("matched_data_0.4caliper_lowdose.csv")
highdose_0.4caliper_data <- read.csv("matched_data_0.4caliper_highdose.csv")
caliper_p_dist_0.4 <- read.csv("full_p_distribution_0.4caliper.csv")[, -1]

# reformatting / cleaning data
names(lowdose_0.2caliper_data)[1] <- "ID"
names(highdose_0.2caliper_data)[1] <- "ID"
all_postmatch_0.2caliper_data <- rbind(lowdose_0.2caliper_data, highdose_0.2caliper_data)

names(lowdose_0.3caliper_data)[1] <- "ID"
names(highdose_0.3caliper_data)[1] <- "ID"
all_postmatch_0.3caliper_data <- rbind(lowdose_0.3caliper_data, highdose_0.3caliper_data)

names(lowdose_0.4caliper_data)[1] <- "ID"
names(highdose_0.4caliper_data)[1] <- "ID"
all_postmatch_0.4caliper_data <- rbind(lowdose_0.4caliper_data, highdose_0.4caliper_data)

# histogram showing distribution of probability of observed treatment assignment of matched pairs
ggplot() + 
  #geom_histogram(aes(x = caliper_p_dist_0.2), binwidth = 0.05, fill = "white", color = "black") + 
  #geom_histogram(aes(x = caliper_p_dist_0.3), binwidth = 0.05, fill = "white", color = "black") + 
  geom_histogram(aes(x = caliper_p_dist_0.4), binwidth = 0.025, fill = "white", color = "black") + 
  theme_bw() + 
  labs(x = "Probability of Observed Treatment Assignment", y = "Frequency") + 
  theme(axis.text = element_text(size = 12))

#ggsave("P_distribution_0.2caliper.png", width = 4.5, height = 3)
#ggsave("P_distribution_0.3caliper.png", width = 4.5, height = 3)
ggsave("P_distribution_0.4caliper.png", width = 4.5, height = 3)

# calculate ATE and inference using different caliper cutoffs
caliper0.2_analysis <- quantile_analysis(highdose_0.2caliper_data, lowdose_0.2caliper_data, c(0), caliper_p_dist_0.2, 0.2)
caliper0.3_analysis <- quantile_analysis(highdose_0.3caliper_data, lowdose_0.3caliper_data, c(0), caliper_p_dist_0.3, 0.3)
caliper0.4_analysis <- quantile_analysis(highdose_0.4caliper_data, lowdose_0.4caliper_data, c(0), caliper_p_dist_0.4, 0.4)
































#### Balance table graphic for calipered matched pairs (xi = 0.1, 0.2, 0.3, 0.4) ----

bt_0.1 <- read.csv("balance_table_0.1caliper.csv")
bt_0.2 <- read.csv("balance_table_0.2caliper.csv")
bt_0.3 <- read.csv("balance_table_0.3caliper.csv")
bt_0.4 <- read.csv("balance_table_0.4caliper.csv")

std_diffs <- data.frame(do.call("cbind", list(bt_0.1$results.std.diff.unstrat, 
                                   bt_0.2$results.std.diff.unstrat,
                                   bt_0.3$results.std.diff.unstrat,
                                   bt_0.4$results.std.diff.unstrat)))
names(std_diffs) <- c("xi0.1", "xi0.2", "xi0.3", "xi0.4")
std_diffs <- std_diffs[-c(3, 4, 37, 38), ]
std_vars <- c("female", "above_65", "black/hispanic", 
              "driving alone to work", "smoking", "flu vaccination", "some college", 
              "social association", "non metro", "poverty rate", "population density", 
              "population", "cases 1", "cases 2", "cases 3", "cases 4", "cases 5",
              "cases 6", "cases 7", "cases 8", "cases 9", "cases 10", "cases 11",
              "deaths 1", "deaths 2", "deaths 3", "deaths 4", "deaths 5", "deaths 6",
              "deaths 7", "deaths 8", "deaths 9", "deaths 10", "deaths 11")
std_diffs <- cbind(std_vars, std_diffs)
std_long <- std_diffs %>% pivot_longer(!std_vars, names_to = "xi")

ggplot(data = std_long) +
  geom_point(aes(x = factor(std_vars), y = value, color = xi)) +
  scale_x_discrete(limits = rev(std_vars)) +
  labs(x = "Covariates", 
       y = "Standardized Difference-in-means", 
       color = "Caliper Cutoff") +
  theme(axis.text = element_text(size = 8),
        axis.title = element_text(size = 9),
        legend.title = element_text(size = 9),
        legend.text = element_text(size = 8)) +
  coord_flip()
